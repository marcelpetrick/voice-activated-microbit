/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 27.01.2021 21:17:24

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 1568;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_ADD, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[31];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[15];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,624 } };
const TfArray<1, float> quant0_scale = { 1, { 0.037935361266136169, } };
const TfArray<1, int> quant0_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 192, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int8_t tensor_data2[8] = { -72, -30, -61, -127, 15, -67, -84, -40, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const TfArray<1, float> quant2_scale = { 1, { 0.012686365284025669, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int8_t tensor_data3[16] = { 18, -106, -10, -28, -56, -37, 25, -127, 23, -23, -29, 81, 104, -31, -75, -32, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0083505762740969658, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[4] = { -1836, -168, 1916, -757, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00025844850460998714, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[4*192] = { 
  -39, 35, -127, 25, 32, -35, -57, -26, -14, 20, -35, 5, -1, -51, 14, -6, 3, 22, -23, 4, 11, -1, -34, 44, -18, 19, 5, 21, -11, -52, 16, -31, 21, 9, 23, 5, -6, -11, -43, -18, -73, 19, -34, 9, -6, -53, 10, 19, -15, 29, -7, -25, 20, 1, -27, -3, -34, 12, 2, -33, -28, -52, -59, 12, 19, 22, 21, -13, 18, 20, -6, 34, -21, -8, 21, -97, -79, -26, -13, -18, 10, 46, -11, 2, -10, 34, -13, 0, -18, -77, -6, -45, -65, -21, -36, 19, -13, 0, -56, -24, -31, -2, 24, -36, -22, -2, -10, -58, -46, -58, -6, -10, 13, 26, 16, -21, 3, 7, -16, -9, -12, -78, -51, -78, -52, -20, -90, -39, 24, -105, 22, -42, -52, -12, -16, -10, -26, -105, -49, -38, -55, -1, -12, -11, 16, 31, -10, -71, -6, -8, -28, -63, -59, -27, -55, -27, -34, -32, 24, -36, 19, -13, 9, -2, -53, 10, -4, -43, -50, 19, -32, 12, -16, -43, 3, 16, 39, 11, 14, 14, -5, -11, -8, -56, 26, 19, -10, 4, -4, -61, 14, 0, 
  33, 12, 1, -23, 43, -19, 9, 13, -26, 17, 14, -11, -18, -42, 17, -35, 3, 9, 12, 1, 24, 13, -14, 24, 13, 7, 10, 2, -4, -35, 0, -27, 32, 16, 21, -26, -1, -14, -25, -10, -16, -1, -25, 2, -27, -21, 14, -34, -25, 23, -30, -1, 20, 15, -21, -14, -39, -46, 2, -4, -19, -66, -23, -16, 7, 19, 7, 2, 6, 7, -9, -3, -30, 17, -5, -68, -59, -28, -30, 3, 5, 46, 5, -6, 7, 0, -36, 18, -48, -6, -3, -87, -70, -23, 9, 13, 7, 12, 23, -15, -42, -25, 0, -7, -38, 24, 17, -36, -49, -30, 12, -2, 21, 45, 32, -11, -41, -15, -45, 19, -61, -25, -16, -18, -19, -17, 5, -4, 22, 41, 35, -24, -26, -34, -46, -20, -39, 2, -39, -27, -39, 8, 0, -39, 6, 32, -7, -23, -32, -9, -19, -5, -70, -5, 2, -14, -20, -8, -12, 15, 19, 8, 7, -42, -29, -24, -42, -20, -79, 5, -34, -7, -10, -18, 10, -20, 56, 28, 28, -35, -7, 8, -40, -50, -14, -7, -24, 4, 2, 6, 29, 11, 
  1, -25, 9, -3, -22, 21, 34, -23, 8, -3, 21, -21, -27, -8, -8, 23, 8, -20, -22, -5, 1, 21, 7, -23, -7, 5, 12, -15, -10, -6, -4, 23, -18, -32, -32, 14, 0, 15, 15, -21, 6, -2, 20, -18, -15, -32, 8, 13, -1, -9, -9, 1, 2, 0, 5, -16, -12, 17, -6, 10, 6, 3, 30, 10, -25, 0, -43, 1, 12, 11, 13, -25, -2, 12, -1, 17, 18, -2, 20, 10, -44, -5, -55, -7, -4, 2, 14, -26, 5, 22, -5, 18, 12, -19, 25, -5, -30, -13, -38, -16, 37, 36, -6, -7, 2, -4, -3, 13, 20, -6, 20, 19, -48, -23, -14, -4, 24, 7, 4, -5, 3, 22, 10, 8, 13, -24, 33, 12, -38, 3, -45, 4, 25, 17, 10, 16, -4, 3, 23, 11, 8, -28, -5, 23, -26, 3, -25, 3, 15, 31, -2, 7, 6, -11, 4, 3, 0, -14, 4, -1, 1, 6, -21, 1, 25, 2, 27, -7, -1, -11, 29, -4, -11, -1, -7, 1, -3, -16, -25, 1, 2, 32, 25, -3, 6, -26, 29, -19, -9, -7, -24, 11, 
  -33, -14, 5, 21, -9, 8, -12, 5, -2, -6, -15, 8, 20, 22, -10, 14, -11, -18, 1, 1, -12, 0, -3, 3, 16, -5, -20, 11, 7, 23, -27, 7, -1, -30, -4, 13, -20, -8, 13, 18, 17, -9, -4, 15, 5, 23, -14, -5, 38, -13, 26, 21, -16, -11, -7, 31, 29, 4, -25, 16, 23, 37, -14, -6, 4, -12, -5, 10, -11, -8, 9, -5, 16, 11, -7, 16, 35, 36, -6, -20, 37, -33, 35, 28, -25, -21, 6, 6, 43, 18, -8, 30, 39, 36, -15, -18, 27, -27, 29, 27, 1, -2, 4, 41, 22, -10, -18, 21, 9, 26, -30, -18, 12, -10, 14, 10, 11, -6, 2, 19, 22, 30, 11, 14, 30, 28, -12, -1, 17, 15, 12, 23, 1, -12, 10, 14, 22, 10, -2, 14, 8, 14, -5, -7, 9, -23, 9, 28, -1, -3, 2, 37, 26, 7, 4, 13, 5, 25, 6, 1, 16, -12, 18, 21, -7, -8, 10, 16, 17, 8, 4, 12, 4, 38, -15, -8, 10, -29, 20, 10, 1, -10, -4, 27, -21, 2, -15, 15, 2, 11, -39, 4, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 4,192 } };
const TfArray<1, float> quant5_scale = { 1, { 0.011785889975726604, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[8] = { 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension6 = { 1, { 8 } };
const TfArray<8, float> quant6_scale = { 8, { 0.00021954334806650877, 0.00014693700359202921, 0.00032475445186719298, 0.00015193392755463719, 0.00032449941500090063, 0.00016686545859556645, 0.00012740083911921829, 0.0003170488344039768, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[8*1*3*13] = { 
  /* [0][0][][] */ -88,105,50,-14,55,45,17,-1,11,-12,-17,-7,3, 55,-113,-127,-72,-38,-38,26,22,7,-18,-4,-10,4, 27,34,88,58,-24,-10,18,9,2,-16,5,-2,22, 
  /* [1][0][][] */ -62,-124,109,56,-26,15,41,-52,41,22,11,-69,34, -125,-127,64,112,-39,-20,55,17,8,1,18,-61,-1, -106,-80,38,82,49,-50,28,-10,-44,-45,48,2,-24, 
  /* [2][0][][] */ -127,4,55,24,-17,-4,11,-5,-22,8,23,-2,1, 17,4,4,7,6,30,0,-7,1,6,2,-3,-11, 81,-12,-67,-13,6,9,0,22,-20,6,5,9,-4, 
  /* [3][0][][] */ 62,95,66,-65,70,-25,-87,-17,3,4,-4,21,-20, 59,127,47,-86,37,-7,-51,59,75,-44,-22,23,-41, 40,105,40,-77,3,25,-37,-4,68,-23,16,-37,-7, 
  /* [4][0][][] */ -127,1,-20,-7,-32,-8,17,7,-17,-38,13,1,-4, -47,-5,9,15,28,-13,1,8,16,30,-29,13,11, 40,0,-6,-22,-4,-18,20,25,-18,-34,21,37,-3, 
  /* [5][0][][] */ 69,-2,-27,-24,-23,-27,55,-29,-26,-3,43,-29,-3, 111,4,-66,-8,2,-14,74,-23,-43,19,5,9,-5, 127,-72,-105,-4,-14,-10,27,-23,4,-2,34,0,-14, 
  /* [6][0][][] */ -58,94,20,55,-127,26,23,-8,-30,64,-11,91,-56, -44,103,48,80,-75,5,54,35,-22,44,-53,24,-78, -54,101,86,99,-79,3,2,26,-23,-20,-24,52,-84, 
  /* [7][0][][] */ -127,-25,-25,12,-19,-66,-41,10,21,14,-19,-16,-10, 4,17,-44,-29,2,32,32,26,-10,14,15,27,3, 20,-16,20,1,-17,6,-12,-48,1,5,8,-8,-24, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 8,1,3,13 } };
const TfArray<8, float> quant7_scale = { 8, { 0.0057873008772730827, 0.0038733519613742828, 0.0085607320070266724, 0.0040050740353763103, 0.0085540087893605232, 0.0043986784294247627, 0.0033583664335310459, 0.008357606828212738, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00013383908662945032, 0.00019653163326438516, 0.00018585451471153647, 0.00015417647955473512, 0.00013124434917699546, 0.00011823754175566137, 0.00014725203800480813, 0.00024106947239488363, 0.00021588240633718669, 0.00012579502072185278, 0.00012084532500011846, 0.00036467181053012609, 0.00026940333191305399, 0.00024584110360592604, 0.00012034754035994411, 0.00015190137492027134, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int8_t tensor_data9[16*1*3*8] = { 
  /* [0][0][][] */ -43,-26,-90,99,-127,37,-23,-87, 3,-85,-73,-23,-80,-48,-41,-22, -45,17,-61,104,-45,-8,-14,-42, 
  /* [1][0][][] */ -24,99,18,-127,-29,9,-11,-10, -44,-20,-14,-15,-29,20,-27,-16, -81,0,38,42,-29,23,-32,-15, 
  /* [2][0][][] */ -12,-20,-127,-43,-80,54,-31,-39, -39,-115,-24,86,-58,-20,-9,-56, -8,-98,-85,-1,-39,-1,52,-50, 
  /* [3][0][][] */ -16,-29,-30,37,-46,76,127,-19, -77,-9,-64,-37,-62,-19,-17,-19, -71,-57,-60,-87,-76,30,83,-52, 
  /* [4][0][][] */ -99,-8,127,-82,35,-9,26,44, -42,-33,86,-31,6,27,-58,-6, 54,-80,37,-9,-52,5,-68,-58, 
  /* [5][0][][] */ 94,-106,127,7,-37,7,-62,87, 14,-96,-61,-54,-68,-17,-67,-51, 52,-25,30,-65,51,-61,7,89, 
  /* [6][0][][] */ -29,-38,-13,-60,-40,28,-91,92, 8,-21,-14,-109,-40,67,-63,-20, 28,-4,8,-127,-3,-44,74,-4, 
  /* [7][0][][] */ 6,-33,3,5,-6,50,16,-29, 11,-127,2,32,-14,-12,70,-16, -11,-110,-7,0,-13,32,-16,-14, 
  /* [8][0][][] */ -35,-74,-54,-2,-127,-22,-21,-45, -56,-38,-71,-9,-48,62,-49,-57, -31,-96,-42,-22,-17,40,-12,-16, 
  /* [9][0][][] */ -32,-6,25,10,-39,-34,46,-60, 49,88,16,-40,-35,-18,127,-47, -90,23,-34,-37,-36,22,63,-39, 
  /* [10][0][][] */ 49,-15,62,-83,31,-62,15,8, 105,-35,-5,-38,-33,127,-17,-24, 52,-34,-65,-40,-48,-72,-17,-12, 
  /* [11][0][][] */ -34,2,1,-65,1,-75,12,6, -16,4,-12,-105,-3,-95,-14,-3, -31,-2,-7,-94,6,-127,15,8, 
  /* [12][0][][] */ -2,-3,-18,-126,7,-38,-1,-9, -19,2,-11,-127,11,-78,6,5, -29,-7,-24,-98,-11,-75,-27,-4, 
  /* [13][0][][] */ -5,-85,-17,23,-73,-7,28,-51, -9,-127,-68,-15,-116,-8,18,-83, -27,-50,-31,43,-71,51,48,-65, 
  /* [14][0][][] */ 18,-35,-35,-2,-30,47,-80,-71, 55,-23,13,-79,-44,-22,-60,-94, 37,127,57,-69,33,-45,-6,-10, 
  /* [15][0][][] */ 127,-44,-68,-12,-28,10,57,-10, -27,-40,31,-76,42,-1,53,46, 34,-15,19,-16,-5,-30,0,53, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0041206600144505501, 0.0060508484020829201, 0.0057221194729208946, 0.0047468109987676144, 0.0040407725609838963, 0.0036403168924152851, 0.0045336200855672359, 0.0074220867827534676, 0.0066466233693063259, 0.003872998058795929, 0.0037206057459115982, 0.011227576062083244, 0.0082944342866539955, 0.0075689968653023243, 0.0037052799016237259, 0.0046767648309469223, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int32_t tensor_data10[4] = { 1, 1, 48, 13, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data11[3] = { 1, 48, 8, };
const TfArray<1, int> tensor_dimension11 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data12[4] = { 1, 48, 1, 8, };
const TfArray<1, int> tensor_dimension12 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data13[4] = { 1, 1, 24, 8, };
const TfArray<1, int> tensor_dimension13 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data14[3] = { 1, 24, 16, };
const TfArray<1, int> tensor_dimension14 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data15[4] = { 1, 24, 1, 16, };
const TfArray<1, int> tensor_dimension15 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,48,13 } };
const TfArray<1, float> quant16_scale = { 1, { 0.037935361266136169, } };
const TfArray<1, int> quant16_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,48,8 } };
const TfArray<1, float> quant17_scale = { 1, { 0.077122032642364502, } };
const TfArray<1, int> quant17_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<3, int> tensor_dimension18 = { 3, { 1,48,8 } };
const TfArray<1, float> quant18_scale = { 1, { 0.077122032642364502, } };
const TfArray<1, int> quant18_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<3, int> tensor_dimension19 = { 3, { 1,48,8 } };
const TfArray<1, float> quant19_scale = { 1, { 0.032480012625455856, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,48,1,8 } };
const TfArray<1, float> quant20_scale = { 1, { 0.032480012625455856, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,24,1,8 } };
const TfArray<1, float> quant21_scale = { 1, { 0.032480012625455856, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,1,24,8 } };
const TfArray<1, float> quant22_scale = { 1, { 0.032480012625455856, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,1,24,16 } };
const TfArray<1, float> quant23_scale = { 1, { 0.12171367555856705, } };
const TfArray<1, int> quant23_zero = { 1, { 79 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<3, int> tensor_dimension24 = { 3, { 1,24,16 } };
const TfArray<1, float> quant24_scale = { 1, { 0.12171367555856705, } };
const TfArray<1, int> quant24_zero = { 1, { 79 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<3, int> tensor_dimension25 = { 3, { 1,24,16 } };
const TfArray<1, float> quant25_scale = { 1, { 0.021928638219833374, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,24,1,16 } };
const TfArray<1, float> quant26_scale = { 1, { 0.021928638219833374, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,12,1,16 } };
const TfArray<1, float> quant27_scale = { 1, { 0.021928638219833374, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,192 } };
const TfArray<1, float> quant28_scale = { 1, { 0.021928638219833374, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<2, int> tensor_dimension29 = { 2, { 1,4 } };
const TfArray<1, float> quant29_scale = { 1, { 0.092699848115444183, } };
const TfArray<1, int> quant29_zero = { 1, { 34 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,4 } };
const TfArray<1, float> quant30_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,10 } };
const TfArray<1, int> outputs0 = { 1, { 16 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 16,7,6 } };
const TfArray<1, int> outputs1 = { 1, { 17 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 17,11 } };
const TfArray<1, int> outputs2 = { 1, { 18 } };
const TfLiteAddParams opdata3 = { kTfLiteActRelu };
const TfArray<2, int> inputs3 = { 2, { 18,2 } };
const TfArray<1, int> outputs3 = { 1, { 19 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 19,12 } };
const TfArray<1, int> outputs4 = { 1, { 20 } };
const TfLitePoolParams opdata5 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs5 = { 1, { 20 } };
const TfArray<1, int> outputs5 = { 1, { 21 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 21,13 } };
const TfArray<1, int> outputs6 = { 1, { 22 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 22,9,8 } };
const TfArray<1, int> outputs7 = { 1, { 23 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 23,14 } };
const TfArray<1, int> outputs8 = { 1, { 24 } };
const TfLiteAddParams opdata9 = { kTfLiteActRelu };
const TfArray<2, int> inputs9 = { 2, { 24,3 } };
const TfArray<1, int> outputs9 = { 1, { 25 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 25,15 } };
const TfArray<1, int> outputs10 = { 1, { 26 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 26 } };
const TfArray<1, int> outputs11 = { 1, { 27 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 27,1 } };
const TfArray<1, int> outputs12 = { 1, { 28 } };
const TfLiteFullyConnectedParams opdata13 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs13 = { 3, { 28,5,4 } };
const TfArray<1, int> outputs13 = { 1, { 29 } };
const TfLiteSoftmaxParams opdata14 = { 1 };
const TfArray<1, int> inputs14 = { 1, { 29 } };
const TfArray<1, int> outputs14 = { 1, { 30 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 624, (TfLiteIntArray*)&tensor_dimension0, 624, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 624, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 624, (TfLiteIntArray*)&tensor_dimension17, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension23, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension24, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension26, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension27, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension29, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension30, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_ADD, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 31;
  for(size_t i = 0; i < 31; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_ADD] = *tflite::ops::micro::Register_ADD();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 15; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 15; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  30, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 15; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
