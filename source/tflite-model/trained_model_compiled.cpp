/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 27.01.2021 21:50:32

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 1568;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_ADD, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[31];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[15];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,624 } };
const TfArray<1, float> quant0_scale = { 1, { 0.046715777367353439, } };
const TfArray<1, int> quant0_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 192, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int8_t tensor_data2[8] = { -42, -68, -26, -127, -125, -54, 92, -44, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0058046518824994564, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int8_t tensor_data3[16] = { -57, -12, -2, -75, -31, -18, -7, -127, 99, -6, 66, -53, -42, -46, -39, -52, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0037721218541264534, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[3] = { -2270, 767, 307, };
const TfArray<1, int> tensor_dimension4 = { 1, { 3 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0001018213079078123, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[3*192] = { 
  -56, -71, -76, 40, 1, 21, -48, 111, 21, 61, 2, 32, -22, 24, 0, -50, -86, -12, -4, 15, 41, 70, -12, 64, 9, 54, 7, 27, -35, 93, -21, -71, 25, -8, -1, 17, 27, -4, -123, 66, 11, -14, 33, 26, -58, 1, -97, -50, 1, -76, 6, -20, 17, 14, -61, 108, -3, -47, -25, 47, -27, -68, -101, 16, -24, -10, 37, -99, 82, 46, -54, 74, -70, -55, -18, 29, -54, 22, -91, -10, 51, -23, 33, -88, 56, 6, -47, 119, -113, -51, -95, 27, 16, 28, 19, -40, -41, -25, -12, 2, 8, 21, 11, -41, -127, -6, -82, -12, -16, 9, -3, 50, -51, 14, 18, -59, -12, -24, -21, -3, -107, -91, -109, -53, -114, 24, 45, -77, -37, -6, 2, -48, -11, -48, 8, -10, -47, -55, -24, -86, -25, 31, 39, 9, -21, -25, -6, -59, -34, -96, -10, -17, -24, -35, -36, -69, -50, -10, -38, -11, 14, -34, -1, -17, -22, -74, 3, 39, 2, -10, 6, -40, -13, -39, 33, -16, -53, -29, -80, 14, -32, -51, 21, 68, -3, 42, -1, -41, 7, -10, 39, -49, 
  -2, 5, 60, 0, 27, 25, 39, -22, -33, 11, -46, 4, 30, -24, -25, 7, -12, 28, 24, 36, 31, -26, -30, -33, -35, 12, -39, 10, 27, -39, -5, 20, 5, -2, 61, 24, 4, -10, 21, 9, -46, 0, -19, -12, 8, -71, -17, 45, -5, -21, 20, 35, -4, -58, -20, -19, -32, 3, -6, -44, 5, -48, 1, 8, 43, -25, -3, 23, 13, -14, -9, 3, -19, 23, 27, -22, 45, -89, -35, 20, 42, -55, 9, 18, 16, -67, -15, -14, -4, -13, 11, 3, 24, -65, -29, 35, 12, -15, 30, 5, 22, -16, -21, 20, 32, 0, -4, 0, 39, -40, -49, 41, -1, -26, -25, 38, 21, 9, -29, 11, -26, 11, 8, 18, 33, -45, -34, 11, 27, -49, 4, 12, 0, 32, -51, 24, -1, -26, 25, 3, 44, -63, -47, 18, 1, -2, -3, 33, 22, 2, 11, 13, 11, 5, -19, 51, 30, -56, -33, 33, -14, 25, 21, 25, -37, -19, 11, -22, -21, 15, -26, 2, 43, -32, 14, 42, -2, -41, 32, 6, 8, 26, -19, -36, -39, 4, -38, 37, 34, -42, -36, 53, 
  1, -3, -16, -9, 22, -34, -28, -46, 34, -57, 9, -37, -8, 9, 8, -4, -26, 44, -4, -35, 1, -12, 2, -24, -1, -11, -10, -1, 17, -12, 28, 17, -30, 35, -8, -43, -10, 42, 12, -32, 18, -1, 10, 12, -31, 51, 34, 9, -24, 12, -34, -13, -52, 21, 60, -44, 16, 58, 13, -42, 3, 45, 39, -13, -7, 94, -17, 1, -42, 29, 36, -51, 19, -2, 18, -23, 11, 16, 18, 10, -59, 82, 0, -11, -17, 28, 55, -43, 42, 25, 49, 1, -3, 39, 49, -20, -12, 50, 17, -8, 0, 27, 46, 15, 29, 27, -16, 35, 16, 54, 19, -9, -36, 41, -34, -2, 4, 29, 48, 23, 5, 53, 4, 36, 23, 24, 24, 5, -12, 27, -10, 3, -1, 29, 7, 12, 43, 51, 43, -3, 0, 14, -14, -7, -40, 4, -14, -8, -8, 37, 34, 24, 62, 27, 17, 13, -16, 62, 27, 17, -35, 10, 8, -27, -16, 43, 19, -35, 39, -5, 38, 25, 28, 24, 44, -42, 32, -14, -21, -31, 11, -1, -33, -49, 19, 2, 9, -38, -29, 25, -14, -40, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 3,192 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0048351967707276344, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[8] = { 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension6 = { 1, { 8 } };
const TfArray<8, float> quant6_scale = { 8, { 0.00024082587333396077, 0.00020060340466443449, 0.00021615323203150183, 0.0001636872038943693, 0.00017271269462071359, 0.00026158124092034996, 0.00017497458611615002, 0.00021510495571419597, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[8*1*3*13] = { 
  /* [0][0][][] */ -127,75,79,64,29,22,10,17,11,1,3,24,22, 71,-109,-123,-78,-27,-23,5,-11,30,10,-10,15,10, -68,69,25,9,4,-17,-34,-17,9,1,-22,-5,29, 
  /* [1][0][][] */ 114,40,58,-43,13,-48,5,-69,42,-15,-8,7,-5, 91,50,51,-38,-5,13,5,-53,37,-9,15,-38,-17, 127,51,5,-17,8,22,-12,-46,4,-10,21,-20,38, 
  /* [2][0][][] */ -127,-63,47,62,-10,10,21,-20,25,5,4,-23,32, -87,-75,42,39,-13,-22,55,-50,-19,-1,54,-73,25, -62,-76,27,33,-10,9,17,-20,-40,6,12,-22,18, 
  /* [3][0][][] */ 54,127,12,-10,31,-71,-49,35,9,25,-45,26,21, 94,113,-54,10,18,-55,-49,-2,43,-45,-37,33,8, 25,109,-21,42,-9,-55,-15,-10,29,17,-73,29,-8, 
  /* [4][0][][] */ 34,-13,-127,-9,-3,13,33,21,-48,9,40,-10,-41, 121,-8,-127,11,-48,21,23,48,-36,-4,25,11,-32, 107,14,-96,-29,-50,53,22,11,-3,-8,16,17,-29, 
  /* [5][0][][] */ -39,54,43,-29,-44,-12,-3,-2,30,22,26,8,-12, 42,-52,40,52,44,9,10,-17,-2,19,11,-3,-9, 127,-84,-54,-4,12,30,11,-18,10,5,-6,0,-13, 
  /* [6][0][][] */ -127,28,-62,-67,-10,3,24,38,-30,46,-20,20,14, -99,26,-12,82,-17,1,-71,-60,44,-109,9,5,-64, -72,-84,-7,-35,29,-59,34,6,-7,35,22,16,36, 
  /* [7][0][][] */ -39,-31,-83,6,-21,-34,-14,15,-14,-25,-4,-7,-11, 107,117,34,-47,36,53,14,38,-2,-24,8,37,-16, -127,-104,32,28,-61,-73,21,10,-11,-28,12,-29,11, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 8,1,3,13 } };
const TfArray<8, float> quant7_scale = { 8, { 0.0051551293581724167, 0.0042941253632307053, 0.004626985639333725, 0.0035038955975323915, 0.0036970954388380051, 0.0055994195863604546, 0.0037455137353390455, 0.0046045463532209396, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0001035391105688177, 0.00012688931019511074, 8.4419953054748476e-05, 9.6542382379993796e-05, 9.7929420007858425e-05, 0.00010483929509064183, 0.00012857376714237034, 0.00017645703337620944, 0.00014708962407894433, 0.00011768514377763495, 9.4771625299472362e-05, 0.00010761793964775279, 9.0639397967606783e-05, 0.00017645413754507899, 0.00014095888764131814, 0.00010018006287282333, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int8_t tensor_data9[16*1*3*8] = { 
  /* [0][0][][] */ -70,8,-127,40,-2,40,-18,12, 78,-71,-56,-29,-39,-98,19,-60, 40,-57,-8,27,-22,80,72,69, 
  /* [1][0][][] */ -21,88,-127,-21,-7,-32,-18,-14, -68,-31,-111,5,-71,-13,-102,-24, -59,100,-30,29,30,-2,-77,-50, 
  /* [2][0][][] */ 7,-17,-45,-50,27,127,-40,-18, 123,26,-114,96,43,-7,-44,97, 26,-78,-26,-28,-101,-97,-7,-21, 
  /* [3][0][][] */ -86,26,-54,-30,24,93,-82,36, -18,-35,7,-20,6,28,2,-27, 86,-127,81,-58,-83,9,59,-23, 
  /* [4][0][][] */ -27,19,-10,17,127,-83,-78,38, -55,-18,-54,14,-22,-115,5,48, 61,-22,53,26,-76,56,-14,77, 
  /* [5][0][][] */ -41,-46,-88,8,118,-7,-99,12, -48,-47,-127,29,-32,-4,-94,-21, -80,4,-38,42,112,-26,-113,12, 
  /* [6][0][][] */ -29,58,-24,25,60,3,-127,-13, -34,-33,-8,-33,-6,57,-93,-67, -122,21,-90,-80,29,22,-123,-94, 
  /* [7][0][][] */ -38,-95,81,-102,-58,31,6,-30, -35,-127,-13,-46,54,1,-21,-33, -47,-38,-2,-17,60,-48,-33,-41, 
  /* [8][0][][] */ -13,-111,61,-39,-74,-58,8,17, -9,-114,-65,-30,-88,-61,21,14, -4,-127,3,-71,-95,-86,21,6, 
  /* [9][0][][] */ -121,-32,-47,-38,55,31,-127,-41, -109,78,46,-92,-1,26,-44,-64, -89,12,52,-65,0,25,-47,-24, 
  /* [10][0][][] */ -29,-81,71,-62,-100,-53,-25,-8, 25,-91,-3,-63,-56,-29,51,-94, -14,-102,4,-118,-127,-94,53,-35, 
  /* [11][0][][] */ -27,-40,19,-6,89,-55,8,3, -33,-25,3,-21,-6,-100,-10,63, 2,-7,-78,-3,127,-98,12,21, 
  /* [12][0][][] */ 82,-1,-49,-66,30,127,14,-36, -30,29,-35,-90,45,-44,12,87, -76,-55,-47,-114,-36,85,25,91, 
  /* [13][0][][] */ -58,30,-49,31,1,-16,-69,-31, -72,-10,-43,7,15,-15,-127,-46, -43,8,-59,80,1,28,-52,-35, 
  /* [14][0][][] */ -70,21,-23,57,-3,26,-127,-88, -7,-14,-93,43,1,9,-78,-85, -29,31,-23,-19,37,32,-71,-88, 
  /* [15][0][][] */ 92,-23,-44,-15,-19,-84,11,37, -17,11,-42,-37,39,127,0,47, 122,-22,-24,-62,-3,40,2,69, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0035178852267563343, 0.0043112407438457012, 0.0028682854026556015, 0.0032801616471260786, 0.0033272881992161274, 0.003562060883268714, 0.0043684728443622589, 0.0059953732416033745, 0.0049975747242569923, 0.0039985165931284428, 0.0032199977431446314, 0.0036564692854881287, 0.0030795997008681297, 0.0059952749870717525, 0.0047892741858959198, 0.0034037570003420115, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int32_t tensor_data10[4] = { 1, 1, 48, 13, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data11[3] = { 1, 48, 8, };
const TfArray<1, int> tensor_dimension11 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data12[4] = { 1, 48, 1, 8, };
const TfArray<1, int> tensor_dimension12 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data13[4] = { 1, 1, 24, 8, };
const TfArray<1, int> tensor_dimension13 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data14[3] = { 1, 24, 16, };
const TfArray<1, int> tensor_dimension14 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data15[4] = { 1, 24, 1, 16, };
const TfArray<1, int> tensor_dimension15 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,48,13 } };
const TfArray<1, float> quant16_scale = { 1, { 0.046715777367353439, } };
const TfArray<1, int> quant16_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,48,8 } };
const TfArray<1, float> quant17_scale = { 1, { 0.065499790012836456, } };
const TfArray<1, int> quant17_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<3, int> tensor_dimension18 = { 3, { 1,48,8 } };
const TfArray<1, float> quant18_scale = { 1, { 0.065499790012836456, } };
const TfArray<1, int> quant18_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<3, int> tensor_dimension19 = { 3, { 1,48,8 } };
const TfArray<1, float> quant19_scale = { 1, { 0.029432201758027077, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,48,1,8 } };
const TfArray<1, float> quant20_scale = { 1, { 0.029432201758027077, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,24,1,8 } };
const TfArray<1, float> quant21_scale = { 1, { 0.029432201758027077, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,1,24,8 } };
const TfArray<1, float> quant22_scale = { 1, { 0.029432201758027077, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,1,24,16 } };
const TfArray<1, float> quant23_scale = { 1, { 0.090673886239528656, } };
const TfArray<1, int> quant23_zero = { 1, { 62 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<3, int> tensor_dimension24 = { 3, { 1,24,16 } };
const TfArray<1, float> quant24_scale = { 1, { 0.090673886239528656, } };
const TfArray<1, int> quant24_zero = { 1, { 62 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<3, int> tensor_dimension25 = { 3, { 1,24,16 } };
const TfArray<1, float> quant25_scale = { 1, { 0.021058358252048492, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,24,1,16 } };
const TfArray<1, float> quant26_scale = { 1, { 0.021058358252048492, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,12,1,16 } };
const TfArray<1, float> quant27_scale = { 1, { 0.021058358252048492, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,192 } };
const TfArray<1, float> quant28_scale = { 1, { 0.021058358252048492, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<2, int> tensor_dimension29 = { 2, { 1,3 } };
const TfArray<1, float> quant29_scale = { 1, { 0.063323579728603363, } };
const TfArray<1, int> quant29_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,3 } };
const TfArray<1, float> quant30_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,10 } };
const TfArray<1, int> outputs0 = { 1, { 16 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 16,7,6 } };
const TfArray<1, int> outputs1 = { 1, { 17 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 17,11 } };
const TfArray<1, int> outputs2 = { 1, { 18 } };
const TfLiteAddParams opdata3 = { kTfLiteActRelu };
const TfArray<2, int> inputs3 = { 2, { 18,2 } };
const TfArray<1, int> outputs3 = { 1, { 19 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 19,12 } };
const TfArray<1, int> outputs4 = { 1, { 20 } };
const TfLitePoolParams opdata5 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs5 = { 1, { 20 } };
const TfArray<1, int> outputs5 = { 1, { 21 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 21,13 } };
const TfArray<1, int> outputs6 = { 1, { 22 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 22,9,8 } };
const TfArray<1, int> outputs7 = { 1, { 23 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 23,14 } };
const TfArray<1, int> outputs8 = { 1, { 24 } };
const TfLiteAddParams opdata9 = { kTfLiteActRelu };
const TfArray<2, int> inputs9 = { 2, { 24,3 } };
const TfArray<1, int> outputs9 = { 1, { 25 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 25,15 } };
const TfArray<1, int> outputs10 = { 1, { 26 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 26 } };
const TfArray<1, int> outputs11 = { 1, { 27 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 27,1 } };
const TfArray<1, int> outputs12 = { 1, { 28 } };
const TfLiteFullyConnectedParams opdata13 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs13 = { 3, { 28,5,4 } };
const TfArray<1, int> outputs13 = { 1, { 29 } };
const TfLiteSoftmaxParams opdata14 = { 1 };
const TfArray<1, int> inputs14 = { 1, { 29 } };
const TfArray<1, int> outputs14 = { 1, { 30 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 624, (TfLiteIntArray*)&tensor_dimension0, 624, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 624, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 624, (TfLiteIntArray*)&tensor_dimension17, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension23, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension24, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension26, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension27, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension29, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension30, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_ADD, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 31;
  for(size_t i = 0; i < 31; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_ADD] = *tflite::ops::micro::Register_ADD();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 15; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 15; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  30, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 15; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
